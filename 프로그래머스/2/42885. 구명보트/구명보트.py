def solution(people, limit):
    answer = 0  #정답 담을 리스트
    people.sort()   #사람들을 무게 순으로 정렬
    
    #최적 -> 무거운 사람 + 가벼운 사람
    
    #배열의 시작과 끝을 가리키기 위한 인덱스; 두 인덱스를 사용하여 배열을 순회하거나 분할하는데 활용
    #start:배열의 가장 왼쪽(처음)인덱스로 0으로 초기화
    #end:배열의 가장 오른쪽(마지막)인덱스로,people배열의 길이에서 1뺀값으로 초기화_people배열의 인덱스는 0부터 시작하므로 마지막 인덱스는 len(people)에서 -1을 해야함
    
    start = 0
    end = len(people)-1
    
    #왼쪽 포인터가  오른쪽 포인터보다 작거나 작을때까지 반복
    #확인하지 않은 사람이 남아있는지 확인하기 위해
    while start<=end:
        #가장 가벼운 사람+가장 무거운 사람의 무게가 limit보다 작거나 같으면 -> 두 사람을 하나의 보트에 태울 수 있음
        if people[start]+people[end]<=limit:
            #맨 앞 + 맨 뒤를 함께 태우게 되면, 두번째 가벼운 사람을 확인해야하므로 start를 +1해서 한칸  뒤로감
            start += 1

        #가장 가벼운 사람과 가장  무거운 사람이 한 쌍이 되어 탈출해야하므로, 함께 탈 수 있다면 answer를증가시키고, 
        #가장 무거운 사람은 항상태워야하므로 무거운 사람의 인덱스는줄임

        end -= 1    #가장 무거운 사람 -> 그 다음으로 무거운 사람으로 이동
        answer += 1     #구명보트 갯수+1하기
    
    return answer

'''
# 오답노트
Q. end -= 1 조건이 if문 밖에 위치하는 이유?
이 부분이 if문 밖으로 나오는 이유는 "가장 무거운 사람은 항상 태워야 하므로" 라는 조건에 해당하기 때문

이 알고리즘은 가장 가벼운 사람과 가장 무거운 사람이 한 쌍이 되어 함께 탈 수 있는지를 검사하고, 만약 함께 탈 수 있다면 두 사람을 함께 보내기 위해 구명보트의 개수를 증가시킴
그리고 가장 무거운 사람은 항상 태워야 하므로 end -= 1을 통해 무거운 사람의 인덱스를 줄이고, answer += 1을 통해 구명보트 개수를 증가시킵니다.

이 부분은 반복문 안에서 한 번만 실행되는 것이 아니라, 가장 무거운 사람이 가장 가벼운 사람과 함께 타든 혹은 가장 무거운 사람만 타든 간에 항상 실행되어야 하는 조건이므로 if문 밖으로 나와야함


'''